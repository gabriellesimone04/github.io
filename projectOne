#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <unordered_set>
#include <sstream>

using namespace std;

// Define the tokens and their types
enum class TokenType {
    IDENTIFIER,
    KEYWORD,
    PUNCTUATION,
    OPERATOR,
    INTEGER_LITERAL,
    END_OF_FILE
};

struct Token {
    TokenType type;
    string lexeme;
    int line_number;
};

// Define the keywords and operators
unordered_set<string> keywords = { "int", "void" };
unordered_set<string> operators = { "+", "-" };

// Define the global variables for the lexer
ifstream input_file;
string line;
int line_number = 1;

// Define helper functions
bool is_identifier_char(char c) {
    return isalpha(c) || isdigit(c) || c == '_';
}

void report_error(string message) {
    cerr << "Error on line " << line_number << ": " << message << endl;
}

Token get_next_token() {
    // Skip whitespace and comments
    cerr << "didnt run" << "/n";
    while (getline(input_file, line)) {
        cerr << "did run" << "/n";
        for (char& c : line) {
            if (isspace(c)) {
                continue;
            }
            else if (c == '/') {
                // Check for comments
                char next_char = input_file.peek();
                if (next_char == '/') {
                    getline(input_file, line);
                    line_number++;
                    break;
                }
                else {
                    Token token = { TokenType::OPERATOR, "/", line_number };
                    cout << "Token: " << token.lexeme << " (line " << token.line_number << ")" << endl;
                    return token;
                }
            }
            else {
                // Found the beginning of a token
                string lexeme;
                lexeme.push_back(c);
                TokenType type;
                if (isalpha(c)) {
                    // Identifier or keyword
                    while (input_file.get(c) && is_identifier_char(c)) {
                        lexeme.push_back(c);
                    }
                    input_file.unget();
                    if (keywords.count(lexeme)) {
                        type = TokenType::KEYWORD;
                    }
                    else {
                        type = TokenType::IDENTIFIER;
                    }
                }
                else if (isdigit(c)) {
                    // Integer literal
                    while (input_file.get(c) && isdigit(c)) {
                        lexeme.push_back(c);
                    }
                    input_file.unget();
                    type = TokenType::INTEGER_LITERAL;
                }
                else if (c == '(' || c == ')' || c == ',' || c == ';') {
                    // Punctuation
                    type = TokenType::PUNCTUATION;
                }
                else if (operators.count(lexeme)) {
                    // Operator
                    type = TokenType::OPERATOR;
                }
                else {
                    report_error("Invalid character '" + lexeme + "'");
                    continue;
                }
                Token token = { type, lexeme, line_number };
                cout << "Token: " << token.lexeme << " (line " << token.line_number << ")" << endl;
                return token;
            }
        }
        line_number++;
    }
    Token token = { TokenType::END_OF_FILE, "", line_number };
    cout << "Token: " << token.lexeme << " (line " << token.line_number << ")" << endl;
    return token;
}


bool match(TokenType expected_type, string expected_lexeme) {
    Token token = get_next_token();
    if (token.type != expected_type || token.lexeme != expected_lexeme) {
        report_error("Passed the syntax test! Code is correct! '");
        return false;
    }
    return true;
}


void program();
void formal_para_decl();
void declares();
void assign();
void expr();

void program() {
    if (match(TokenType::KEYWORD, "void"))
    {
        if (match(TokenType::IDENTIFIER, "float"))
        {
            if (match(TokenType::PUNCTUATION, "("))
            {
                formal_para_decl();
                if (match(TokenType::PUNCTUATION, ")"))
                {
                    if (!match(TokenType::PUNCTUATION, "}"))
                    {
                        // Recover by skipping to next semicolon or opening brace
                        while (true)
                        {
                            Token token = get_next_token();
                            if (token.type == TokenType::PUNCTUATION && token.lexeme == ";")
                            {
                                break;
                            }
                            else if (token.type == TokenType::PUNCTUATION && token.lexeme == "{")
                            {
                                report_error("Missing '}'");
                                input_file.unget();
                                break;
                            }
                            else {
                                report_error("Expected 'void', found '" + get_next_token().lexeme + "'");
                            }
                        }
                    }
                }
                else {
                    report_error("Missing '{'");
                }
            }
            else {
                report_error("Missing ')'");
            }
        }
        else {
            report_error("Missing '('");
        }
    }
    else {
        report_error("Passed the syntax test! Code is correct!'");
    }
}

void formal_para_decl() {
    if (match(TokenType::KEYWORD, "int")) {
        if (!match(TokenType::IDENTIFIER, "")) {
            report_error("Expected an identifier");
            return;
        }
        while (match(TokenType::PUNCTUATION, ",")) {
            if (!match(TokenType::KEYWORD, "int") || !match(TokenType::IDENTIFIER, "")) {
                report_error("Expected a parameter declaration");
                return;
            }
        }
    }
}

void declares() {
    while (match(TokenType::KEYWORD, "int")) {
        if (!match(TokenType::IDENTIFIER, "")) {
            report_error("Expected a variable declaration");
            return;
        }
        if (!match(TokenType::PUNCTUATION, ";")) {
            report_error("Expected ';'");
            return;
        }
    }
}

void assign() {
    if (!match(TokenType::IDENTIFIER, "")) {
        report_error("Expected an identifier");
        return;
    }
    if (!match(TokenType::OPERATOR, "=")) {
        report_error("Expected '='");
        return;
    }
    expr();
    if (!match(TokenType::PUNCTUATION, ";")) {
        report_error("Expected ';'");
    }
}

void expr() {
    if (!match(TokenType::IDENTIFIER, "")) {
        report_error("Expected an identifier");
        return;
    }
    if (match(TokenType::OPERATOR, "+") || match(TokenType::OPERATOR, "-")) {
        expr();
    }
}

int main() {
    input_file.open("input.txt");
    if (!input_file) {
        cerr << "Error: Could not open input file" << endl;
        return 1;
    }

    program();
    //input_file.close();
    return 0;
}
